from enum import Enum, auto

class NodeRelationshipType(Enum):
  SCO = "SCO"
  HAS_TYPE = "HAS_TYPE"
  HAS_VULNERABILITY = "HAS_VULNERABILITY"
  COUNTRY = "country"
  LOCATED_IN_THE_ADMINISTRATIVE_TERRITORIAL_ENTITY = "located in the administrative territorial entity"
  CONTAINS_ADMINISTRATIVE_TERRITORIAL_ENTITY = "contains administrative territorial entity"
  DATE_OF_BIRTH = "date of birth"
  SPORT = "sport"
  INSTANCE_OF = "instance of"
  POINT_IN_TIME = "point in time"
  DATE_OF_DEATH = "date of death"
  PART_OF = "part of"
  SHARES_BORDER_WITH = "shares border with"
  PUBLICATION_DATE = "publication date"
  PLACE_OF_BIRTH = "place of birth"
  INCEPTION = "inception"
  MEMBER_OF_SPORTS_TEAM = "member of sports team"
  GENRE = "genre"
  PERFORMER = "performer"
  HAS_PART = "has part"
  CAST_MEMBER = "cast member"
  COUNTRY_OF_CITIZENSHIP = "country of citizenship"
  PARTICIPANT_IN = "participant in"
  PARENT_TAXON = "parent taxon"
  SUBCLASS_OF = "subclass of"
  LOCATION = "location"
  MEMBER_OF_POLITICAL_PARTY = "member of political party"
  DIRECTOR = "director"
  AUTHOR = "author"
  EDUCATED_AT = "educated at"
  CAPITAL = "capital"
  LEAGUE = "league"
  HEADQUARTERS_LOCATION = "headquarters location"
  RECORD_LABEL = "record label"
  POSITION_HELD = "position held"
  COUNTRY_OF_ORIGIN = "country of origin"
  SPOUSE = "spouse"
  MEMBER_OF = "member of"
  CONFLICT = "conflict"
  FOLLOWED_BY = "followed by"
  SIBLING = "sibling"
  LOCATED_IN_OR_NEXT_TO_BODY_OF_WATER = "located in or next to body of water"
  OWNED_BY = "owned by"
  FATHER = "father"
  NOTABLE_WORK = "notable work"
  OCCUPATION = "occupation"
  FOLLOWS = "follows"
  PUBLISHER = "publisher"
  PART_OF_THE_SERIES = "part of the series"
  MOUTH_OF_THE_WATERCOURSE = "mouth of the watercourse"
  AWARD_RECEIVED = "award received"
  CHILD = "child"
  MOUNTAIN_RANGE = "mountain range"
  OPERATOR = "operator"
  POSITION_PLAYED_ON_TEAM_SPECIALITY = "position played on team speciality"
  WINNER = "winner"
  SPORTS_SEASON_OF_LEAGUE_OR_COMPETITION = "sports season of league or competition"
  PLACE_OF_DEATH = "place of death"
  MANUFACTURER = "manufacturer"
  NAMED_AFTER = "named after"
  COMPOSER = "composer"
  PARTICIPANT = "participant"
  APPLIES_TO_JURISDICTION = "applies to jurisdiction"
  CREATOR = "creator"
  PARENT_ORGANIZATION = "parent organization"
  FOUNDED_BY = "founded by"
  START_TIME = "start time"
  TRIBUTARY = "tributary"
  EMPLOYER = "employer"
  SUBSIDIARY = "subsidiary"
  PRESENT_IN_WORK = "present in work"
  DEVELOPER = "developer"
  FIELD_OF_WORK = "field of work"
  WORK_PERIOD_START = "work period start"
  LOCATION_OF_FORMATION = "location of formation"
  PLATFORM = "platform"
  ORIGINAL_BROADCASTER = "original broadcaster"
  RELIGION = "religion"
  LOCATED_ON_TERRAIN_FEATURE = "located on terrain feature"
  ORGANIZER = "organizer"
  PRODUCT_OR_MATERIAL_PRODUCED = "product or material produced"
  CAPITAL_OF = "capital of"
  DIPLOMATIC_RELATION = "diplomatic relation"
  CONTINENT = "continent"
  END_TIME = "end time"
  CONNECTING_LINE = "connecting line"
  FACET_OF = "facet of"
  DISTRIBUTED_BY = "distributed by"
  OWNER_OF = "owner of"
  REPLACED_BY = "replaced by"
  PARTICIPATING_TEAM = "participating team"
  HOME_VENUE = "home venue"
  SCREENWRITER = "screenwriter"
  REPLACES = "replaces"
  LICENSED_TO_BROADCAST_TO = "licensed to broadcast to"
  PRODUCER = "producer"
  SPORTS_DISCIPLINE_COMPETED_IN = "sports discipline competed in"
  ENCODES = "encodes"
  PRODUCTION_COMPANY = "production company"
  CONSTELLATION = "constellation"
  MAIN_SUBJECT = "main subject"
  USE = "use"
  USES = "uses"
  TWINNED_ADMINISTRATIVE_BODY = "twinned administrative body"
  POPULATION = "population"
  MILITARY_BRANCH = "military branch"
  FAMILY = "family"
  MOTHER = "mother"
  ETHNIC_GROUP = "ethnic group"
  CHARACTERS = "characters"
  PLACE_SERVED_BY_TRANSPORT_HUB = "place served by transport hub"
  OCCUPANT = "occupant"
  ARCHITECT = "architect"
  HERITAGE_DESIGNATION = "heritage designation"
  OPPOSITE_OF = "opposite of"
  CONFERRED_BY = "conferred by"
  LEGISLATIVE_BODY = "legislative body"
  INSTRUMENT = "instrument"
  ARCHITECTURAL_STYLE = "architectural style"
  DATE_OF_OFFICIAL_OPENING = "date of official opening"
  CROSSES = "crosses"
  DISSOLVED_ABOLISHED_OR_DEMOLISHED_DATE = "dissolved abolished or demolished date"
  BASED_ON = "based on"
  LANGUAGE_USED = "language used"
  ENDEMIC_TO = "endemic to"
  CONNECTS_WITH = "connects with"
  SEASON_OF_CLUB_OR_TEAM = "season of club or team"
  LANGUAGE_OF_WORK_OR_NAME = "language of work or name"
  INDUSTRY = "industry"
  RELIGIOUS_ORDER = "religious order"
  DISCOVERER_OR_INVENTOR = "discoverer or inventor"
  POLITICAL_IDEOLOGY = "political ideology"
  AREA = "area"
  MILITARY_RANK = "military rank"
  AFFILIATION = "affiliation"
  NOMINATED_FOR = "nominated for"
  SCHOOL_DISTRICT = "school district"
  HAS_PARTS_OF_THE_CLASS = "has parts of the class"
  NUMBER_OF_PARTICIPANTS = "number of participants"
  ELEVATION_ABOVE_SEA_LEVEL = "elevation above sea level"
  SUCCESSFUL_CANDIDATE = "successful candidate"
  TIME_PERIOD = "time period"
  HAS_EFFECT = "has effect"
  DIFFERENT_FROM = "different from"
  MOVEMENT = "movement"
  OFFICEHOLDER = "officeholder"
  MATERIAL_USED = "material used"
  COURT = "court"
  OFFICE_CONTESTED = "office contested"
  COMPETITION_CLASS = "competition class"
  NARRATIVE_LOCATION = "narrative location"
  CHAIRPERSON = "chairperson"
  WORK_LOCATION = "work location"
  OPERATING_SYSTEM = "operating system"
  STUDIED_BY = "studied by"
  CANDIDACY_IN_ELECTION = "candidacy in election"
  SEASON = "season"
  INFLUENCED_BY = "influenced by"
  BASIN_COUNTRY = "basin country"
  CONTAINS_SETTLEMENT = "contains settlement"
  SUBJECT_HAS_ROLE = "subject has role"
  TAXONOMIC_TYPE = "taxonomic type"
  SIGNIFICANT_EVENT = "significant event"
  PRESENTER = "presenter"
  RESIDENCE = "residence"
  LOCATED_IN_PROTECTED_AREA = "located in protected area"
  HAS_CAUSE = "has cause"
  DESIGNED_BY = "designed by"
  DIOCESE = "diocese"
  MAINTAINED_BY = "maintained by"
  APPOINTED_BY = "appointed by"
  NUMBER_OF_EPISODES = "number of episodes"
  DEPICTS = "depicts"
  PLACE_OF_PUBLICATION = "place of publication"
  RELATIVE = "relative"
  PRACTICED_BY = "practiced by"
  INFLOWS = "inflows"
  COLLECTION = "collection"
  STUDENT_OF = "student of"
  TERMINUS = "terminus"
  RADIO_FORMAT = "radio format"
  EVENT_DISTANCE = "event distance"
  OPERATING_AREA = "operating area"
  LEGISLATED_BY = "legislated by"
  LYRICS_BY = "lyrics by"
  STUDIES = "studies"
  OFFICE_HELD_BY_HEAD_OF_GOVERNMENT = "office held by head of government"
  ANIMAL_BREED = "animal breed"
  FIELD_OF_THIS_OCCUPATION = "field of this occupation"
  EDITOR = "editor"
  REPRESENTS = "represents"
  VOICE_TYPE = "voice type"
  SITE_OF_ASTRONOMICAL_DISCOVERY = "site of astronomical discovery"
  SAID_TO_BE_THE_SAME_AS = "said to be the same as"
  HIGHEST_POINT = "highest point"
  HAS_WORKS_IN_THE_COLLECTION = "has works in the collection"
  HISTORIC_COUNTY = "historic county"
  AUTHORITY = "authority"
  PROGRAMMING_LANGUAGE = "programming language"
  AIRLINE_HUB = "airline hub"
  STOCK_EXCHANGE = "stock exchange"
  DATE_OF_FIRST_PERFORMANCE = "date of first performance"
  LENGTH = "length"
  LOCATED_ON_STREET = "located on street"
  ITEM_OPERATED = "item operated"
  HEAD_OF_STATE = "head of state"
  SURFACE_PLAYED_ON = "surface played on"
  CARRIES = "carries"
  VICTORY = "victory"
  RANKING = "ranking"
  MEDICAL_CONDITION_TREATED = "medical condition treated"
  HEAD_OF_GOVERNMENT = "head of government"
  USED_BY = "used by"
  LIBRETTIST = "librettist"
  START_POINT = "start point"
  PLACE_OF_BURIAL = "place of burial"
  IS_A_LIST_OF = "is a list of"
  DRAFTED_BY = "drafted by"
  WRITING_SYSTEM = "writing system"
  CANDIDATE = "candidate"
  AFTER_A_WORK_BY = "after a work by"
  DERIVATIVE_WORK = "derivative work"
  INDIGENOUS_TO = "indigenous to"
  OFFICE_HELD_BY_HEAD_OF_THE_ORGANIZATION = "office held by head of the organization"
  SERVICE_ENTRY = "service entry"
  STUDENT = "student"
  LAKE_OUTFLOW = "lake outflow"
  GRAM_STAINING = "Gram staining"
  PUBLISHED_IN = "published in"
  ORIGINAL_LANGUAGE_OF_FILM_OR_TV_SHOW = "original language of film or TV show"
  ORIGIN_OF_THE_WATERCOURSE = "origin of the watercourse"
  DRUG_USED_FOR_TREATMENT = "drug used for treatment"
  SPORTS_LEAGUE_LEVEL = "sports league level"
  ALIAS  = "alias"
  BROTHER  = "brother"
  SISTER  = "sister"
  INLAW  = "inlaw"
  FRIEND  = "friend"
  ASSOCIATE  = "associate"
  TEACHER  = "teacher"
  COAUTHOR  = "coauthor"
  LIVES_AT  = "lives_at"
  EMPLOYMENT  = "employment"
  WAS_LOCATED_AT  = "was_located_at"
  WORKED_AT  = "worked_at"
  LIVED_AT  = "lived_at"
  PUBLISHED_AT  = "published_at"
  HAS_EMAIL  = "has_email"
  HAS_PHONE_NUMBER  = "has_phone_number"
  HAS_PASSPORT  = "has_passport"
  ATTENDED_SCHOOL  = "attended_school"
  HAS_BANK_ACCOUNT  = "has_bank_account"
  HAS_PATENT  = "has_patent"
  HAS_CERTIFICATION  = "has_certification"
  PUBLISHED_DOCUMENT  = "published_document"
  HAS_SOCIAL_MEDIA  = "has_social_media"
  HAS_SSN  = "has_ssn"
  HAS_CONNECTION  = "has_connection"
  HAS_DATA_BREACH = "has_data_breach"
  @classmethod
  def value_of(cls, value):
        for k, v in cls.__members__.items():
            if k == value:
                return v
        else:
            raise ValueError(f"'{cls.__name__}' enum not found for '{value}'")


